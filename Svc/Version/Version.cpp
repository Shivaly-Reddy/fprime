// ======================================================================
// \title  Version.cpp
// \author sreddy
// \brief  cpp file for Version component implementation class
// ======================================================================

#include "FpConfig.hpp"
#include "Svc/Version/Version.hpp"
#include <version.hpp> //autogenerated file containing hardcoded project and framework versions

namespace Svc {

  // ----------------------------------------------------------------------
  // Component construction and destruction
  // ----------------------------------------------------------------------

  Version ::
    Version(const char* const compName) :
      VersionComponentBase(compName), m_enable(true)
  {

  }

  Version ::
    ~Version()
  {

  }

// ----------------------------------------------------------------------
// Handler implementations for user-defined typed input ports
// ----------------------------------------------------------------------

void Version ::run_handler(const NATIVE_INT_TYPE portNum, U32 context) {
    if(m_enable) {
        Version_tlm();
    }
}

  // ----------------------------------------------------------------------
  // Handler implementations for commands
  // ----------------------------------------------------------------------

   void Version ::
    ENABLE_cmdHandler(
        FwOpcodeType opCode,
        U32 cmdSeq,
        Svc::VersionEnabled enable
    )
  {
    m_enable = (enable == VersionEnabled::ENABLED);
    this->cmdResponse_out(opCode, cmdSeq, Fw::CmdResponse::OK);
  }

  //Command handler to EVR versions
  void Version ::
    VERSION_cmdHandler(
        FwOpcodeType opCode,
        U32 cmdSeq
    )
  {
    Fw::LogStringArg version_string(FRAMEWORK_VERSION);
    this->log_ACTIVITY_LO_FRAMEWORK_VERSION(version_string);
     
     version_string = PROJECT_VERSION;
     this->log_ACTIVITY_LO_PROJECT_VERSION(version_string);

    this->cmdResponse_out(opCode, cmdSeq, Fw::CmdResponse::OK);
  }

  //function to log tlm on versions
  void Version :: Version_tlm() {
    Fw::TlmString version_string(FRAMEWORK_VERSION);
    this->tlmWrite_FRAMEWORK_VERSION(version_string);

    version_string = PROJECT_VERSION;
    this->tlmWrite_PROJECT_VERSION(version_string);
  }

}
